import os
from flask_migrate import Migrate, current, init, migrate, upgrade
from src.app import app, db
from src.models.user import User
from src.models.patient import Patient
from src.models.surgery_request import SurgeryRequest

# Configurar a extens√£o de migra√ß√£o
migrate_instance = Migrate(app, db)

# Criar diret√≥rio de migra√ß√µes se n√£o existir
if not os.path.exists('migrations'):
    print("Criando reposit√≥rio de migra√ß√µes...")
    directory = os.path.join(os.path.dirname(
        os.path.abspath(__file__)), 'migrations')
    init(directory=directory)

if __name__ == '__main__':
    import sys

    if len(sys.argv) <= 1:
        print("Uso: python manage.py [comando]")
        print("Comandos dispon√≠veis:")
        print("  init_db     - Inicializar banco de dados")
        print("  migrate     - Criar migra√ß√£o")
        print("  upgrade     - Aplicar migra√ß√µes")
        sys.exit(1)

    command = sys.argv[1]

    if command == 'init_db':
        # Inicializar banco de dados do zero
        with app.app_context():
            db.drop_all()
            db.create_all()

            # Criar usu√°rio admin
            admin = User(
                username='admin',
                password='admin123',
                role='administrador'
            )
            db.session.add(admin)
            db.session.commit()
            print("‚úÖ Banco de dados inicializado")
            print("üë§ Usu√°rio admin criado com senha: admin123")

    elif command == 'migrate':
        # Criar nova migra√ß√£o
        message = sys.argv[2] if len(sys.argv) > 2 else "Migra√ß√£o autom√°tica"
        directory = os.path.join(os.path.dirname(
            os.path.abspath(__file__)), 'migrations')
        # Executar dentro do contexto da aplica√ß√£o
        with app.app_context():
            migrate(directory=directory, message=message)
        print(f"‚úÖ Migra√ß√£o criada: {message}")

    elif command == 'upgrade':
        # Aplicar migra√ß√µes
        directory = os.path.join(os.path.dirname(
            os.path.abspath(__file__)), 'migrations')
        # Executar dentro do contexto da aplica√ß√£o
        with app.app_context():
            upgrade(directory=directory)
        print("‚úÖ Migra√ß√µes aplicadas com sucesso")

    else:
        print(f"Comando desconhecido: {command}")
        print("Comandos dispon√≠veis: init_db, migrate, upgrade")
